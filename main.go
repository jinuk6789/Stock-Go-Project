package main

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/gorilla/mux"
)

/*
//Init Stock var as a slice Stock struct
//var stocks []Stock

//QuoteSummary is the first section of API calling
type QuoteSummary struct {
	Result *Result `json:"result"`
}

//Result contains what kind of requests I asked to YFinance
type Result struct {
	SummaryDetail  *SummaryDetail  `json:"summaryDetail"`
	SummaryProfile *SummaryProfile `json:"summaryProfile"`
}

//SummaryProfile provides information about the company
type SummaryProfile struct {
	City  string `json:"city"`
	State string `json:"state"`
}

//SummaryDetail provides stock value and market capacity
type SummaryDetail struct {
	RegularMarketOpen *RegularMarketOpen `json:"regularMarketOpen"`
	MarketCap         *MarketCap         `json:"marketCap"`
}

//RegularMarketOpen (Section within SummaryDetail that contains stock value during Market Hours)
type RegularMarketOpen struct {
	Raw float64 `json:"raw"`
}

//MarketCap (Section within SummaryDetail that contains market capacity)
type MarketCap struct {
	Raw float64 `json:"raw"`
}

*/

type AutoGenerated struct {
	QuoteSummary QuoteSummary `json:"quoteSummary"`
}
type PriceHint struct {
	Raw     int    `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type PreviousClose struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type Open struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type DayLow struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type DayHigh struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type RegularMarketPreviousClose struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type RegularMarketOpen struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type RegularMarketDayLow struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type RegularMarketDayHigh struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type DividendRate struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type DividendYield struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type ExDividendDate struct {
	Raw int    `json:"raw"`
	Fmt string `json:"fmt"`
}
type PayoutRatio struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type FiveYearAvgDividendYield struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type Beta struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type TrailingPE struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type ForwardPE struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type Volume struct {
	Raw     int    `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type RegularMarketVolume struct {
	Raw     int    `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type AverageVolume struct {
	Raw     int    `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type AverageVolume10Days struct {
	Raw     int    `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type AverageDailyVolume10Day struct {
	Raw     int    `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type Bid struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type Ask struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type BidSize struct {
	Raw     int    `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type AskSize struct {
	Raw     int    `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type MarketCap struct {
	Raw     int64  `json:"raw"`
	Fmt     string `json:"fmt"`
	LongFmt string `json:"longFmt"`
}
type Yield struct {
}
type YtdReturn struct {
}
type TotalAssets struct {
}
type ExpireDate struct {
}
type StrikePrice struct {
}
type OpenInterest struct {
}
type FiftyTwoWeekLow struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type FiftyTwoWeekHigh struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type PriceToSalesTrailing12Months struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type FiftyDayAverage struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type TwoHundredDayAverage struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type TrailingAnnualDividendRate struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type TrailingAnnualDividendYield struct {
	Raw float64 `json:"raw"`
	Fmt string  `json:"fmt"`
}
type NavPrice struct {
}
type Volume24Hr struct {
}
type VolumeAllCurrencies struct {
}
type CirculatingSupply struct {
}
type MaxSupply struct {
}
type StartDate struct {
}
type SummaryDetail struct {
	MaxAge                       int                          `json:"maxAge"`
	PriceHint                    PriceHint                    `json:"priceHint"`
	PreviousClose                PreviousClose                `json:"previousClose"`
	Open                         Open                         `json:"open"`
	DayLow                       DayLow                       `json:"dayLow"`
	DayHigh                      DayHigh                      `json:"dayHigh"`
	RegularMarketPreviousClose   RegularMarketPreviousClose   `json:"regularMarketPreviousClose"`
	RegularMarketOpen            RegularMarketOpen            `json:"regularMarketOpen"`
	RegularMarketDayLow          RegularMarketDayLow          `json:"regularMarketDayLow"`
	RegularMarketDayHigh         RegularMarketDayHigh         `json:"regularMarketDayHigh"`
	DividendRate                 DividendRate                 `json:"dividendRate"`
	DividendYield                DividendYield                `json:"dividendYield"`
	ExDividendDate               ExDividendDate               `json:"exDividendDate"`
	PayoutRatio                  PayoutRatio                  `json:"payoutRatio"`
	FiveYearAvgDividendYield     FiveYearAvgDividendYield     `json:"fiveYearAvgDividendYield"`
	Beta                         Beta                         `json:"beta"`
	TrailingPE                   TrailingPE                   `json:"trailingPE"`
	ForwardPE                    ForwardPE                    `json:"forwardPE"`
	Volume                       Volume                       `json:"volume"`
	RegularMarketVolume          RegularMarketVolume          `json:"regularMarketVolume"`
	AverageVolume                AverageVolume                `json:"averageVolume"`
	AverageVolume10Days          AverageVolume10Days          `json:"averageVolume10days"`
	AverageDailyVolume10Day      AverageDailyVolume10Day      `json:"averageDailyVolume10Day"`
	Bid                          Bid                          `json:"bid"`
	Ask                          Ask                          `json:"ask"`
	BidSize                      BidSize                      `json:"bidSize"`
	AskSize                      AskSize                      `json:"askSize"`
	MarketCap                    MarketCap                    `json:"marketCap"`
	Yield                        Yield                        `json:"yield"`
	YtdReturn                    YtdReturn                    `json:"ytdReturn"`
	TotalAssets                  TotalAssets                  `json:"totalAssets"`
	ExpireDate                   ExpireDate                   `json:"expireDate"`
	StrikePrice                  StrikePrice                  `json:"strikePrice"`
	OpenInterest                 OpenInterest                 `json:"openInterest"`
	FiftyTwoWeekLow              FiftyTwoWeekLow              `json:"fiftyTwoWeekLow"`
	FiftyTwoWeekHigh             FiftyTwoWeekHigh             `json:"fiftyTwoWeekHigh"`
	PriceToSalesTrailing12Months PriceToSalesTrailing12Months `json:"priceToSalesTrailing12Months"`
	FiftyDayAverage              FiftyDayAverage              `json:"fiftyDayAverage"`
	TwoHundredDayAverage         TwoHundredDayAverage         `json:"twoHundredDayAverage"`
	TrailingAnnualDividendRate   TrailingAnnualDividendRate   `json:"trailingAnnualDividendRate"`
	TrailingAnnualDividendYield  TrailingAnnualDividendYield  `json:"trailingAnnualDividendYield"`
	NavPrice                     NavPrice                     `json:"navPrice"`
	Currency                     string                       `json:"currency"`
	FromCurrency                 interface{}                  `json:"fromCurrency"`
	ToCurrency                   interface{}                  `json:"toCurrency"`
	LastMarket                   interface{}                  `json:"lastMarket"`
	Volume24Hr                   Volume24Hr                   `json:"volume24Hr"`
	VolumeAllCurrencies          VolumeAllCurrencies          `json:"volumeAllCurrencies"`
	CirculatingSupply            CirculatingSupply            `json:"circulatingSupply"`
	Algorithm                    interface{}                  `json:"algorithm"`
	MaxSupply                    MaxSupply                    `json:"maxSupply"`
	StartDate                    StartDate                    `json:"startDate"`
	Tradeable                    bool                         `json:"tradeable"`
}
type SummaryProfile struct {
	Address1            string        `json:"address1"`
	City                string        `json:"city"`
	State               string        `json:"state"`
	Zip                 string        `json:"zip"`
	Country             string        `json:"country"`
	Phone               string        `json:"phone"`
	Website             string        `json:"website"`
	Industry            string        `json:"industry"`
	Sector              string        `json:"sector"`
	LongBusinessSummary string        `json:"longBusinessSummary"`
	FullTimeEmployees   int           `json:"fullTimeEmployees"`
	CompanyOfficers     []interface{} `json:"companyOfficers"`
	MaxAge              int           `json:"maxAge"`
}
type Result struct {
	SummaryDetail  SummaryDetail  `json:"summaryDetail"`
	SummaryProfile SummaryProfile `json:"summaryProfile"`
}
type QuoteSummary struct {
	Result []Result    `json:"result"`
	Error  interface{} `json:"error"`
}

//Stock Struct
type Stock struct {
	Name     string  `json:"company"`
	Symbol   string  `json:"id"`
	Price    float64 `json:"value"`
	Capacity string  `json:"capacity"`
	Location string
}

//Function for retreiving Stock information
func getStock(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	var stoc AutoGenerated

	//Gets and saves the JSON into response from YFinance
	response, err := http.Get("https://query1.finance.yahoo.com/v10/finance/quoteSummary/AAPL?modules=summaryDetail%2CsummaryProfile")
	if err != nil {
		panic(err)
	} else {
		decoder := json.NewDecoder(response.Body)
		err := decoder.Decode(&stoc)
		if err != nil {
			panic(err)
		}
		defer response.Body.Close()
		if err != nil {
			log.Fatal(err)
		}

		var stock Stock

		for _, s := range stoc.QuoteSummary.Result {
			price := s.SummaryDetail.RegularMarketOpen.Raw
			cap := s.SummaryDetail.RegularMarketVolume.Fmt
			loc := s.SummaryProfile.City
			stock = Stock{Name: "Apple", Symbol: "AAPL", Price: price, Capacity: cap, Location: loc}
		}

		json.NewEncoder(w).Encode(stock)

	}

}

var stourl []string

func addStock(w http.ResponseWriter, r *http.Request) {

	url1 := "https://query1.finance.yahoo.com/v10/finance/quoteSummary/AAPL?modules=summaryDetail%2CsummaryProfile"
	url2 := "https://query1.finance.yahoo.com/v10/finance/quoteSummary/INO?modules=summaryDetail%2CsummaryProfile"
	url3 := "https://query1.finance.yahoo.com/v10/finance/quoteSummary/PLUG?modules=summaryDetail%2CsummaryProfile"

	stourl = append(stourl, url1)
	stourl = append(stourl, url2)
	stourl = append(stourl, url3)

	var stoc AutoGenerated
	var stocarr []AutoGenerated
	var stock Stock
	var stoo []Stock

	for i := 0; i < len(stourl); i++ {

		response, err := http.Get(stourl[i])
		if err != nil {
			panic(err)
		} else {
			decoder := json.NewDecoder(response.Body)
			err := decoder.Decode(&stoc)
			if err != nil {
				panic(err)
			}
			defer response.Body.Close()

			stocarr = append(stocarr, stoc)

			for _, s := range stocarr[i].QuoteSummary.Result {
				price := s.SummaryDetail.RegularMarketOpen.Raw
				cap := s.SummaryDetail.RegularMarketVolume.Fmt
				loc := s.SummaryProfile.City
				stock = Stock{Name: "", Symbol: "", Price: price, Capacity: cap, Location: loc}
				stoo = append(stoo, stock)
			}

		}
	}

	json.NewEncoder(w).Encode(stoo)

}

func main() {
	//Init Router
	r := mux.NewRouter()

	//Router Handlers / Endpoints
	r.HandleFunc("/api/stocks", getStock).Methods("GET")
	r.HandleFunc("/api/stocks/v1", addStock).Methods("GET")

	log.Printf("Server starting on port 8000")
	log.Printf("Server starting on port 8080")
	log.Fatal(http.ListenAndServe(":8000", r))

	/*
		Ask why Go does not allow the spawning of two servers simultaneously. Or maybe I just formatted
		incorrectly.
	*/
}
